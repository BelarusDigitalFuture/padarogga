@page "/"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Padarogga.Shared
@inject HttpClient Http

<h3>Routes</h3>


@if (routes == null)
{
    <p><em>Loading...</em></p>
}
else
{
<DxDataGrid Data="routes">
    <DxDataGridColumn Field="@nameof(RouteDto.Name)"
                      Caption="Name" />
    <DxDataGridColumn Field="@nameof(RouteDto.CategoryName)"
                      Caption="Category"
                      TextAlignment="DataGridTextAlign.Left"
                      Width="100px" />
    <DxDataGridSpinEditColumn Field="@nameof(RouteDto.Waypoints)"
                              Caption="Waypoints"
                              TextAlignment="DataGridTextAlign.Left"
                              Width="100px" />
    <DxDataGridColumn Field="@nameof(RouteDto.Difficulty)"
                              Caption="Difficulty"
                              TextAlignment="DataGridTextAlign.Left"
                              Width="100px" />
    <DxDataGridSpinEditColumn Field="@nameof(RouteDto.Duration)"
                              Caption="Duration"
                              TextAlignment="DataGridTextAlign.Left"
                              Width="100px" />
    <DxDataGridSpinEditColumn Field="@nameof(RouteDto.Rating)"
                              Caption="Rating"
                              TextAlignment="DataGridTextAlign.Left"
                              Width="100px" />
    <DxDataGridSpinEditColumn Field="@nameof(RouteDto.Favorites)"
                              Caption="Favorites"
                              TextAlignment="DataGridTextAlign.Left"
                              Width="100px" />
    <DxDataGridSpinEditColumn Field="@nameof(RouteDto.Comments)"
                              Caption="Comments" />
</DxDataGrid>
}


@code {

    private List<RouteDto> routes;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            routes = await Http.GetFromJsonAsync<List<RouteDto>>("Routes");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
